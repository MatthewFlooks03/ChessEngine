#include "tables.h"
#include <unordered_map>

using namespace Types;

// Jumping Pieces
constexpr uint64_t Tables::KING_ATTACKS[64] = {
	0x0000000000000302, 0x0000000000000705, 0x0000000000000e0a, 0x0000000000001c14,
	0x0000000000003828, 0x0000000000007050, 0x000000000000e0a0, 0x000000000000c040,
	0x0000000000030203, 0x0000000000070507, 0x00000000000e0a0e, 0x00000000001c141c,
	0x0000000000382838, 0x0000000000705070, 0x0000000000e0a0e0, 0x0000000000c040c0,
	0x0000000003020300, 0x0000000007050700, 0x000000000e0a0e00, 0x000000001c141c00,
	0x0000000038283800, 0x0000000070507000, 0x00000000e0a0e000, 0x00000000c040c000,
	0x0000000302030000, 0x0000000705070000, 0x0000000e0a0e0000, 0x0000001c141c0000,
	0x0000003828380000, 0x0000007050700000, 0x000000e0a0e00000, 0x000000c040c00000,
	0x0000030203000000, 0x0000070507000000, 0x00000e0a0e000000, 0x00001c141c000000,
	0x0000382838000000, 0x0000705070000000, 0x0000e0a0e0000000, 0x0000c040c0000000,
	0x0003020300000000, 0x0007050700000000, 0x000e0a0e00000000, 0x001c141c00000000,
	0x0038283800000000, 0x0070507000000000, 0x00e0a0e000000000, 0x00c040c000000000,
	0x0302030000000000, 0x0705070000000000, 0x0e0a0e0000000000, 0x1c141c0000000000,
	0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000,
	0x0203000000000000, 0x0507000000000000, 0x0a0e000000000000, 0x141c000000000000,
	0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000,
};
constexpr uint64_t Tables::KNIGHT_ATTACKS[64] = {
	0x0000000000020400, 0x0000000000050800, 0x00000000000a1100, 0x0000000000142200,
	0x0000000000284400, 0x0000000000508800, 0x0000000000a01000, 0x0000000000402000,
	0x0000000002040004, 0x0000000005080008, 0x000000000a110011, 0x0000000014220022,
	0x0000000028440044, 0x0000000050880088, 0x00000000a0100010, 0x0000000040200020,
	0x0000000204000402, 0x0000000508000805, 0x0000000a1100110a, 0x0000001422002214,
	0x0000002844004428, 0x0000005088008850, 0x000000a0100010a0, 0x0000004020002040,
	0x0000020400040200, 0x0000050800080500, 0x00000a1100110a00, 0x0000142200221400,
	0x0000284400442800, 0x0000508800885000, 0x0000a0100010a000, 0x0000402000204000,
	0x0002040004020000, 0x0005080008050000, 0x000a1100110a0000, 0x0014220022140000,
	0x0028440044280000, 0x0050880088500000, 0x00a0100010a00000, 0x0040200020400000,
	0x0204000402000000, 0x0508000805000000, 0x0a1100110a000000, 0x1422002214000000,
	0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000,
	0x0400040200000000, 0x0800080500000000, 0x1100110a00000000, 0x2200221400000000,
	0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000,
	0x0004020000000000, 0x0008050000000000, 0x00110a0000000000, 0x0022140000000000,
	0x0044280000000000, 0x0088500000000000, 0x0010a00000000000, 0x0020400000000000,
};
constexpr uint64_t Tables::WHITE_PAWN_ATTACKS[64] = {
	0x0000000000000200, 0x0000000000000500, 0x0000000000000a00, 0x0000000000001400,
	0x0000000000002800, 0x0000000000005000, 0x000000000000a000, 0x0000000000004000,
	0x0000000000020000, 0x0000000000050000, 0x00000000000a0000, 0x0000000000140000,
	0x0000000000280000, 0x0000000000500000, 0x0000000000a00000, 0x0000000000400000,
	0x0000000002000000, 0x0000000005000000, 0x000000000a000000, 0x0000000014000000,
	0x0000000028000000, 0x0000000050000000, 0x00000000a0000000, 0x0000000040000000,
	0x0000000200000000, 0x0000000500000000, 0x0000000a00000000, 0x0000001400000000,
	0x0000002800000000, 0x0000005000000000, 0x000000a000000000, 0x0000004000000000,
	0x0000020000000000, 0x0000050000000000, 0x00000a0000000000, 0x0000140000000000,
	0x0000280000000000, 0x0000500000000000, 0x0000a00000000000, 0x0000400000000000,
	0x0002000000000000, 0x0005000000000000, 0x000a000000000000, 0x0014000000000000,
	0x0028000000000000, 0x0050000000000000, 0x00a0000000000000, 0x0040000000000000,
	0x0200000000000000, 0x0500000000000000, 0x0a00000000000000, 0x1400000000000000,
	0x2800000000000000, 0x5000000000000000, 0xa000000000000000, 0x4000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};
constexpr uint64_t Tables::BLACK_PAWN_ATTACKS[64] = {
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000002, 0x0000000000000005, 0x000000000000000a, 0x0000000000000014,
	0x0000000000000028, 0x0000000000000050, 0x00000000000000a0, 0x0000000000000040,
	0x0000000000000200, 0x0000000000000500, 0x0000000000000a00, 0x0000000000001400,
	0x0000000000002800, 0x0000000000005000, 0x000000000000a000, 0x0000000000004000,
	0x0000000000020000, 0x0000000000050000, 0x00000000000a0000, 0x0000000000140000,
	0x0000000000280000, 0x0000000000500000, 0x0000000000a00000, 0x0000000000400000,
	0x0000000002000000, 0x0000000005000000, 0x000000000a000000, 0x0000000014000000,
	0x0000000028000000, 0x0000000050000000, 0x00000000a0000000, 0x0000000040000000,
	0x0000000200000000, 0x0000000500000000, 0x0000000a00000000, 0x0000001400000000,
	0x0000002800000000, 0x0000005000000000, 0x000000a000000000, 0x0000004000000000,
	0x0000020000000000, 0x0000050000000000, 0x00000a0000000000, 0x0000140000000000,
	0x0000280000000000, 0x0000500000000000, 0x0000a00000000000, 0x0000400000000000,
	0x0002000000000000, 0x0005000000000000, 0x000a000000000000, 0x0014000000000000,
	0x0028000000000000, 0x0050000000000000, 0x00a0000000000000, 0x0040000000000000,
};
constexpr uint64_t Tables::WHITE_PAWN_SINGLE_PUSH[64] = {
	0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800,
	0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
	0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000,
	0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
	0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000,
	0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
	0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000,
	0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
	0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000,
	0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
	0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000,
	0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
	0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000,
	0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};
constexpr uint64_t Tables::BLACK_PAWN_SINGLE_PUSH[64] = {
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008,
	0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
	0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800,
	0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
	0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000,
	0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
	0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000,
	0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
	0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000,
	0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
	0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000,
	0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
	0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000,
	0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
};
constexpr uint64_t Tables::WHITE_PAWN_DOUBLE_PUSH[64] = {
	0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000,
	0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
	0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000,
	0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
	0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000,
	0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
	0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000,
	0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
	0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000,
	0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
	0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000,
	0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};
constexpr uint64_t Tables::BLACK_PAWN_DOUBLE_PUSH[64] = {
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008,
	0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
	0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800,
	0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
	0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000,
	0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
	0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000,
	0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
	0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000,
	0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
	0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000,
	0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
};

// Masks
constexpr uint64_t Tables::ROOK_MAGIC_MASKS[64] = {
	0x000101010101017e, 0x000202020202027c, 0x000404040404047a, 0x0008080808080876,
	0x001010101010106e, 0x002020202020205e, 0x004040404040403e, 0x008080808080807e,
	0x0001010101017e00, 0x0002020202027c00, 0x0004040404047a00, 0x0008080808087600,
	0x0010101010106e00, 0x0020202020205e00, 0x0040404040403e00, 0x0080808080807e00,
	0x00010101017e0100, 0x00020202027c0200, 0x00040404047a0400, 0x0008080808760800,
	0x00101010106e1000, 0x00202020205e2000, 0x00404040403e4000, 0x00808080807e8000,
	0x000101017e010100, 0x000202027c020200, 0x000404047a040400, 0x0008080876080800,
	0x001010106e101000, 0x002020205e202000, 0x004040403e404000, 0x008080807e808000,
	0x0001017e01010100, 0x0002027c02020200, 0x0004047a04040400, 0x0008087608080800,
	0x0010106e10101000, 0x0020205e20202000, 0x0040403e40404000, 0x0080807e80808000,
	0x00017e0101010100, 0x00027c0202020200, 0x00047a0404040400, 0x0008760808080800,
	0x00106e1010101000, 0x00205e2020202000, 0x00403e4040404000, 0x00807e8080808000,
	0x007e010101010100, 0x007c020202020200, 0x007a040404040400, 0x0076080808080800,
	0x006e101010101000, 0x005e202020202000, 0x003e404040404000, 0x007e808080808000,
	0x7e01010101010100, 0x7c02020202020200, 0x7a04040404040400, 0x7608080808080800,
	0x6e10101010101000, 0x5e20202020202000, 0x3e40404040404000, 0x7e80808080808000,
};
constexpr uint64_t Tables::BISHOP_MAGIC_MASKS[64] = {
	0x0040201008040200, 0x0000402010080400, 0x0000004020100a00, 0x0000000040221400,
	0x0000000002442800, 0x0000000204085000, 0x0000020408102000, 0x0002040810204000,
	0x0020100804020000, 0x0040201008040000, 0x00004020100a0000, 0x0000004022140000,
	0x0000000244280000, 0x0000020408500000, 0x0002040810200000, 0x0004081020400000,
	0x0010080402000200, 0x0020100804000400, 0x004020100a000a00, 0x0000402214001400,
	0x0000024428002800, 0x0002040850005000, 0x0004081020002000, 0x0008102040004000,
	0x0008040200020400, 0x0010080400040800, 0x0020100a000a1000, 0x0040221400142200,
	0x0002442800284400, 0x0004085000500800, 0x0008102000201000, 0x0010204000402000,
	0x0004020002040800, 0x0008040004081000, 0x00100a000a102000, 0x0022140014224000,
	0x0044280028440200, 0x0008500050080400, 0x0010200020100800, 0x0020400040201000,
	0x0002000204081000, 0x0004000408102000, 0x000a000a10204000, 0x0014001422400000,
	0x0028002844020000, 0x0050005008040200, 0x0020002010080400, 0x0040004020100800,
	0x0000020408102000, 0x0000040810204000, 0x00000a1020400000, 0x0000142240000000,
	0x0000284402000000, 0x0000500804020000, 0x0000201008040200, 0x0000402010080400,
	0x0002040810204000, 0x0004081020400000, 0x000a102040000000, 0x0014224000000000,
	0x0028440200000000, 0x0050080402000000, 0x0020100804020000, 0x0040201008040200,
};

constexpr uint64_t Tables::ROOK_MAGICS[64] = {
0x0200000009010000, 0x0000042004000000, 0x49041e200c200000, 0x0208300100008000,
0x4060301000040000, 0x2004000410000000, 0x8081804082220800, 0x0404010c00002000,
0x1102c10120600000, 0x89005a0100010000, 0x4004a24050004000, 0x00000c0100044000,
0x000b00d400202000, 0x0000c10000000000, 0x0000002800008000, 0x2080000000408000,
0x4008204300410000, 0xa00a004000000000, 0x0400410210900000, 0x0030600000e02000,
0x0222230400000000, 0x02000a0014220000, 0x8811100000340000, 0x0400200400160600,
0x4012000804000000, 0x0040101007090000, 0x0000000008080000, 0x0000000042220000,
0x0821010029040000, 0x000400a000100000, 0x0004518000008400, 0x80c0080081400000,
0x302000b00cc00000, 0x20280004c0100000, 0x0008430000200000, 0x0000000281010000,
0x0080080100200000, 0x7004004111000000, 0x1040000400a00000, 0x0841020400100200,
0x1101e00000000000, 0x8020000000000000, 0x8030000001020000, 0x0c00100080100000,
0x0800209200080000, 0x0200000002100000, 0x002c400161002000, 0x8021000000140000,
0x02200b0003018000, 0x0400400404802400, 0x0010008008018400, 0x000000e041208000,
0x0300100200000000, 0x0060800421181800, 0x1100000000032000, 0x4628050092014000,
0x0a00014002583800, 0x4030c1101209a020, 0x0020002208000400, 0x4080200200040400,
0x04845404a0000808, 0x0020818000012890, 0x3044062019001510, 0x2010200000240200,
};
constexpr uint64_t Tables::BISHOP_MAGICS[64] = {
0x0021040000000000, 0x2180041800040000, 0x0100000c00000000, 0x5100000000210008,
0x8010600000002000, 0x0100000280000000, 0x8120840002000000, 0x0400000004030000,
0x4200200000a40000, 0x0000900000000000, 0x0000580a20000000, 0x2020020020000000,
0x0084002000000000, 0x1324200884000000, 0x2000004200140000, 0x0040010000000000,
0x0012510042040000, 0x0010400000482000, 0x1210100000043000, 0x2000006008000000,
0x408c001000000000, 0x8008010840000000, 0x0000000200000000, 0x0800210420000000,
0x0808211000402000, 0x1400000042084000, 0x0009820000008000, 0x0240900c00180000,
0x1000050200860000, 0x00200400c0000000, 0x0000000000052000, 0x0004400180000000,
0x0908100012110000, 0x0202100081824000, 0x141210a6c0202000, 0x0082010080202000,
0x050000020881c000, 0x002a0000360cc000, 0x2202200100400000, 0x2a10000002250800,
0x0400030008040000, 0x0000004000840000, 0x0904184408000000, 0x0358200890001000,
0x10a0902000000000, 0x8502000000000000, 0x0480000008452000, 0x0012002000000000,
0x1830140100800000, 0x10500208c0000000, 0x0001240010000000, 0x0028100044000000,
0x080000908c300000, 0x8000040004100000, 0x0000002100400000, 0x1809801002000000,
0x2080400000040000, 0x0049004080100000, 0x8200f09410200000, 0x8001800000020000,
0x20001400000cc800, 0x0028044040000400, 0x0100440008200000, 0x081c108508002000,
};
constexpr uint8_t Tables::ROOK_INDEX_BITS[64] = {
0x00000031, 0x00000032, 0x00000033, 0x00000034,
0x00000035, 0x00000036, 0x00000037, 0x00000038,
0x00000031, 0x00000032, 0x00000033, 0x00000034,
0x00000035, 0x00000036, 0x00000037, 0x00000038,
0x00000031, 0x00000032, 0x00000033, 0x00000034,
0x00000035, 0x00000036, 0x00000037, 0x00000038,
0x00000031, 0x00000032, 0x00000033, 0x00000034,
0x00000035, 0x00000036, 0x00000037, 0x00000038,
0x00000031, 0x00000032, 0x00000033, 0x00000034,
0x00000035, 0x00000036, 0x00000037, 0x00000038,
0x00000031, 0x00000032, 0x00000033, 0x00000034,
0x00000035, 0x00000036, 0x00000037, 0x00000038,
0x00000037, 0x00000037, 0x00000037, 0x00000037,
0x00000037, 0x00000037, 0x00000036, 0x00000037,
0x0000003f, 0x0000003f, 0x0000003f, 0x0000003f,
0x0000003f, 0x0000003f, 0x0000003e, 0x0000003f,
};
constexpr uint8_t Tables::BISHOP_INDEX_BITS[64] = {
0x00000037, 0x0000002f, 0x00000027, 0x0000001f,
0x0000001a, 0x00000022, 0x0000002a, 0x00000032,
0x00000036, 0x00000037, 0x0000002f, 0x00000027,
0x00000022, 0x0000002a, 0x00000032, 0x00000033,
0x00000035, 0x00000036, 0x00000037, 0x0000002f,
0x0000002a, 0x00000032, 0x00000033, 0x00000034,
0x00000034, 0x00000035, 0x00000036, 0x00000037,
0x00000032, 0x00000033, 0x00000034, 0x00000035,
0x00000033, 0x00000034, 0x00000035, 0x00000036,
0x00000037, 0x00000034, 0x00000035, 0x00000036,
0x00000032, 0x00000033, 0x00000034, 0x00000035,
0x00000036, 0x00000037, 0x00000036, 0x00000037,
0x0000002a, 0x0000002b, 0x0000002c, 0x0000002d,
0x0000002e, 0x0000002f, 0x0000002e, 0x0000002f,
0x00000032, 0x00000033, 0x00000034, 0x00000035,
0x00000036, 0x00000037, 0x00000036, 0x00000037,
};

Tables::Tables()
{
	RookMoves = new std::unordered_map<uint64_t, uint64_t>*[64];
	BishopMoves = new std::unordered_map<uint64_t, uint64_t>*[64];

	for (int i = 0; i < 64; i++)
	{
		RookMoves[i] = new std::unordered_map<uint64_t, uint64_t>;
		BishopMoves[i] = new std::unordered_map<uint64_t, uint64_t>;
	}

	InitRookMoves();
	InitBishopMoves();
}

void Tables::InitRookMoves() const
{
	for (uint8_t i = 0; i < 64; i++)
	{
		const Magic magic(i, true);
		MakeTable(magic);
	}
}

void Tables::InitBishopMoves() const
{
	for (uint8_t i = 0; i < 64; i++)
	{
		const Magic magic(i, false);
		MakeTable(magic);
	}
}

uint64_t Tables::MagicIndex(const Magic& magic, const uint64_t blockers)
{
	return ((blockers & magic.Mask) * magic.MagicNumber) >> (64 - magic.IndexBits);
}

uint64_t Tables::GetRookSlidingMoves(const int square, const uint64_t blockers)
{
	uint64_t moves = 0;
	const int rank = square / 8;
	const int file = square % 8;
	// North
	for (int i = rank + 1; i < 8; i++)
	{
		moves |= (1ULL << (i * 8 + file));
		if (blockers & (1ULL << (i * 8 + file))) break;
	}
	// South
	for (int i = rank - 1; i >= 0; i--)
	{
		moves |= (1ULL << (i * 8 + file));
		if (blockers & (1ULL << (i * 8 + file))) break;
	}
	// East
	for (int i = file + 1; i < 8; i++)
	{
		moves |= (1ULL << (rank * 8 + i));
		if (blockers & (1ULL << (rank * 8 + i))) break;
	}
	// West
	for (int i = file - 1; i >= 0; i--)
	{
		moves |= (1ULL << (rank * 8 + i));
		if (blockers & (1ULL << (rank * 8 + i))) break;
	}
	return moves;
}

uint64_t Tables::GetBishopSlidingMoves(const int square, const uint64_t blockers)
{
	uint64_t moves = 0;
	const int rank = square / 8;
	const int file = square % 8;
	// North East
	for (int i = 1; i < 8; i++)
	{
		if (rank + i > 7 || file + i > 7) break;
		moves |= (1ULL << ((rank + i) * 8 + file + i));
		if (blockers & (1ULL << ((rank + i) * 8 + file + i))) break;
	}
	// North West
	for (int i = 1; i < 8; i++)
	{
		if (rank + i > 7 || file - i < 0) break;
		moves |= (1ULL << ((rank + i) * 8 + file - i));
		if (blockers & (1ULL << ((rank + i) * 8 + file - i))) break;
	}
	// South East
	for (int i = 1; i < 8; i++)
	{
		if (rank - i < 0 || file + i > 7) break;
		moves |= (1ULL << ((rank - i) * 8 + file + i));
		if (blockers & (1ULL << ((rank - i) * 8 + file + i))) break;
	}
	// South West
	for (int i = 1; i < 8; i++)
	{
		if (rank - i < 0 || file - i < 0) break;
		moves |= (1ULL << ((rank - i) * 8 + file - i));
		if (blockers & (1ULL << ((rank - i) * 8 + file - i))) break;
	}
	return moves;
}

uint16_t Tables::GetAllBlockers(uint64_t* allBlockers, const uint64_t andMask)
{
	uint64_t currentBlockers = 0;
	uint16_t i = 0;
	do {
		currentBlockers |= ~andMask;
		currentBlockers++;
		currentBlockers &= andMask;

		allBlockers[i] = currentBlockers;
		i++;
		if (currentBlockers == 0) break;
	} while (true);
	return i;
}

void Tables::MakeTable(const Magic& magic) const
{
	auto* allBlockers = new uint64_t[4096];
	const uint16_t numBlockers = GetAllBlockers(allBlockers, magic.Mask);

	for (uint16_t n = 0; n < numBlockers; n++)
	{
		const uint64_t blockers = allBlockers[n];
		const uint64_t index = MagicIndex(magic, blockers);

		uint64_t slidingMoves;
		if (magic.Rook)
		{
			slidingMoves = GetRookSlidingMoves(magic.Square, blockers);
			if (RookMoves[magic.Square]->count(index) == 0)
			{
				RookMoves[magic.Square]->insert(std::make_pair(index, slidingMoves));
			}
		}
		else
		{
			slidingMoves = GetBishopSlidingMoves(magic.Square, blockers);
			if (BishopMoves[magic.Square]->count(index) == 0)
			{
				BishopMoves[magic.Square]->insert(std::make_pair(index, slidingMoves));
			}
		}
	}

	delete[] allBlockers;
}

uint64_t Tables::GetRookMoves(const uint8_t square, const uint64_t allPieces) const
{
	const Magic magic(square, true);
	const uint64_t blockers = allPieces & magic.Mask;
	return RookMoves[square]->at(MagicIndex(magic, blockers));
}

uint64_t Tables::GetBishopMoves(const uint8_t square, const uint64_t allPieces) const
{
	const Magic magic(square, false);
	const uint64_t blockers = allPieces & magic.Mask;
	return BishopMoves[square]->at(MagicIndex(magic, blockers));
}

uint64_t Tables::GetBlackPawnMoves(const uint8_t square, const uint64_t allPieces)
{
	uint64_t move = Tables::BLACK_PAWN_SINGLE_PUSH[square] & ~allPieces;
	if (!move)
	{
		move |= Tables::BLACK_PAWN_DOUBLE_PUSH[square] & ~allPieces;
	}
	move |= Tables::BLACK_PAWN_ATTACKS[square] & allPieces;
	return move;
}

uint64_t Tables::GetWhitePawnMoves(const uint8_t square, const uint64_t allPieces)
{
	uint64_t move = Tables::WHITE_PAWN_SINGLE_PUSH[square] & ~allPieces;
	if (!move)
	{
		move |= Tables::WHITE_PAWN_DOUBLE_PUSH[square] & ~allPieces;
	}
	move |= Tables::WHITE_PAWN_ATTACKS[square] & allPieces;
	return move;
}

bool Tables::RookMagicTesting()
{
	for(uint8_t square = 0; square < 64; square++)
	{
		uint64_t allBlockers[4096];
		const uint64_t numBlockers = GetAllBlockers(allBlockers, ROOK_MAGIC_MASKS[square]);

		auto tables = Tables();

		for(uint64_t n = 0; n < numBlockers; n++)
		{
			if(GetRookSlidingMoves(square, allBlockers[n]) != tables.GetRookMoves(square, allBlockers[n]))
			{
				std::cout << "Rook magic testing failed for square " << static_cast<int>(square) << std::endl;
				std::cout << "Blockers: " << std::endl;
				Types::PrintBitboard(allBlockers[n]);
				std::cout << "Result: " << std::endl;
				Types::PrintBitboard(tables.GetRookMoves(square, allBlockers[n]));
				std::cout << "Expected: " << std::endl;
				Types::PrintBitboard(GetRookSlidingMoves(square, allBlockers[n]));
				return false;
			}
		}
	}
	return true;
}

bool Tables::BishopMagicTesting()
{
	for(uint8_t square = 0; square < 64; square++)
	{
		uint64_t allBlockers[4096];
		const uint64_t numBlockers = GetAllBlockers(allBlockers, BISHOP_MAGIC_MASKS[square]);

		auto tables = Tables();

		for(uint64_t n = 0; n < numBlockers; n++)
		{
			if(GetBishopSlidingMoves(square, allBlockers[n]) != tables.GetBishopMoves(square, allBlockers[n]))
			{
				std::cout << "Bishop magic testing failed for square " << static_cast<int>(square) << std::endl;
				std::cout << "Blockers: " << std::endl;
				Types::PrintBitboard(allBlockers[n]);
				std::cout << "Result: " << std::endl;
				Types::PrintBitboard(tables.GetBishopMoves(square, allBlockers[n]));
				std::cout << "Expected: " << std::endl;
				Types::PrintBitboard(GetBishopSlidingMoves(square, allBlockers[n]));
				return false;
			}
		}
	}
	return true;
}

void Tables::GetMagicTables(uint8_t square, bool rook, uint64_t* mask, uint64_t* magicNumber, uint8_t* indexBits)
{
	*mask = rook ? ROOK_MAGIC_MASKS[square] : BISHOP_MAGIC_MASKS[square];
	*magicNumber = rook ? ROOK_MAGICS[square] : BISHOP_MAGICS[square];
	*indexBits = rook ? ROOK_INDEX_BITS[square] : BISHOP_INDEX_BITS[square];
}

