#include "tables.h"
#include <unordered_map>

using namespace Types;

// Jumping Pieces
constexpr uint64_t Tables::KING_ATTACKS[64] = {
	0x0000000000000302, 0x0000000000000705, 0x0000000000000e0a, 0x0000000000001c14,
	0x0000000000003828, 0x0000000000007050, 0x000000000000e0a0, 0x000000000000c040,
	0x0000000000030203, 0x0000000000070507, 0x00000000000e0a0e, 0x00000000001c141c,
	0x0000000000382838, 0x0000000000705070, 0x0000000000e0a0e0, 0x0000000000c040c0,
	0x0000000003020300, 0x0000000007050700, 0x000000000e0a0e00, 0x000000001c141c00,
	0x0000000038283800, 0x0000000070507000, 0x00000000e0a0e000, 0x00000000c040c000,
	0x0000000302030000, 0x0000000705070000, 0x0000000e0a0e0000, 0x0000001c141c0000,
	0x0000003828380000, 0x0000007050700000, 0x000000e0a0e00000, 0x000000c040c00000,
	0x0000030203000000, 0x0000070507000000, 0x00000e0a0e000000, 0x00001c141c000000,
	0x0000382838000000, 0x0000705070000000, 0x0000e0a0e0000000, 0x0000c040c0000000,
	0x0003020300000000, 0x0007050700000000, 0x000e0a0e00000000, 0x001c141c00000000,
	0x0038283800000000, 0x0070507000000000, 0x00e0a0e000000000, 0x00c040c000000000,
	0x0302030000000000, 0x0705070000000000, 0x0e0a0e0000000000, 0x1c141c0000000000,
	0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000,
	0x0203000000000000, 0x0507000000000000, 0x0a0e000000000000, 0x141c000000000000,
	0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000,
};
constexpr uint64_t Tables::KNIGHT_ATTACKS[64] = {
	0x0000000000020400, 0x0000000000050800, 0x00000000000a1100, 0x0000000000142200,
	0x0000000000284400, 0x0000000000508800, 0x0000000000a01000, 0x0000000000402000,
	0x0000000002040004, 0x0000000005080008, 0x000000000a110011, 0x0000000014220022,
	0x0000000028440044, 0x0000000050880088, 0x00000000a0100010, 0x0000000040200020,
	0x0000000204000402, 0x0000000508000805, 0x0000000a1100110a, 0x0000001422002214,
	0x0000002844004428, 0x0000005088008850, 0x000000a0100010a0, 0x0000004020002040,
	0x0000020400040200, 0x0000050800080500, 0x00000a1100110a00, 0x0000142200221400,
	0x0000284400442800, 0x0000508800885000, 0x0000a0100010a000, 0x0000402000204000,
	0x0002040004020000, 0x0005080008050000, 0x000a1100110a0000, 0x0014220022140000,
	0x0028440044280000, 0x0050880088500000, 0x00a0100010a00000, 0x0040200020400000,
	0x0204000402000000, 0x0508000805000000, 0x0a1100110a000000, 0x1422002214000000,
	0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000,
	0x0400040200000000, 0x0800080500000000, 0x1100110a00000000, 0x2200221400000000,
	0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000,
	0x0004020000000000, 0x0008050000000000, 0x00110a0000000000, 0x0022140000000000,
	0x0044280000000000, 0x0088500000000000, 0x0010a00000000000, 0x0020400000000000,
};
constexpr uint64_t Tables::WHITE_PAWN_ATTACKS[64] = {
	0x0000000000000200, 0x0000000000000500, 0x0000000000000a00, 0x0000000000001400,
	0x0000000000002800, 0x0000000000005000, 0x000000000000a000, 0x0000000000004000,
	0x0000000000020000, 0x0000000000050000, 0x00000000000a0000, 0x0000000000140000,
	0x0000000000280000, 0x0000000000500000, 0x0000000000a00000, 0x0000000000400000,
	0x0000000002000000, 0x0000000005000000, 0x000000000a000000, 0x0000000014000000,
	0x0000000028000000, 0x0000000050000000, 0x00000000a0000000, 0x0000000040000000,
	0x0000000200000000, 0x0000000500000000, 0x0000000a00000000, 0x0000001400000000,
	0x0000002800000000, 0x0000005000000000, 0x000000a000000000, 0x0000004000000000,
	0x0000020000000000, 0x0000050000000000, 0x00000a0000000000, 0x0000140000000000,
	0x0000280000000000, 0x0000500000000000, 0x0000a00000000000, 0x0000400000000000,
	0x0002000000000000, 0x0005000000000000, 0x000a000000000000, 0x0014000000000000,
	0x0028000000000000, 0x0050000000000000, 0x00a0000000000000, 0x0040000000000000,
	0x0200000000000000, 0x0500000000000000, 0x0a00000000000000, 0x1400000000000000,
	0x2800000000000000, 0x5000000000000000, 0xa000000000000000, 0x4000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};
constexpr uint64_t Tables::BLACK_PAWN_ATTACKS[64] = {
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000002, 0x0000000000000005, 0x000000000000000a, 0x0000000000000014,
	0x0000000000000028, 0x0000000000000050, 0x00000000000000a0, 0x0000000000000040,
	0x0000000000000200, 0x0000000000000500, 0x0000000000000a00, 0x0000000000001400,
	0x0000000000002800, 0x0000000000005000, 0x000000000000a000, 0x0000000000004000,
	0x0000000000020000, 0x0000000000050000, 0x00000000000a0000, 0x0000000000140000,
	0x0000000000280000, 0x0000000000500000, 0x0000000000a00000, 0x0000000000400000,
	0x0000000002000000, 0x0000000005000000, 0x000000000a000000, 0x0000000014000000,
	0x0000000028000000, 0x0000000050000000, 0x00000000a0000000, 0x0000000040000000,
	0x0000000200000000, 0x0000000500000000, 0x0000000a00000000, 0x0000001400000000,
	0x0000002800000000, 0x0000005000000000, 0x000000a000000000, 0x0000004000000000,
	0x0000020000000000, 0x0000050000000000, 0x00000a0000000000, 0x0000140000000000,
	0x0000280000000000, 0x0000500000000000, 0x0000a00000000000, 0x0000400000000000,
	0x0002000000000000, 0x0005000000000000, 0x000a000000000000, 0x0014000000000000,
	0x0028000000000000, 0x0050000000000000, 0x00a0000000000000, 0x0040000000000000,
};

// Masks
constexpr uint64_t Tables::ROOK_MAGIC_MASKS[64] = {
	0x000101010101017e, 0x000202020202027c, 0x000404040404047a, 0x0008080808080876,
	0x001010101010106e, 0x002020202020205e, 0x004040404040403e, 0x008080808080807e,
	0x0001010101017e00, 0x0002020202027c00, 0x0004040404047a00, 0x0008080808087600,
	0x0010101010106e00, 0x0020202020205e00, 0x0040404040403e00, 0x0080808080807e00,
	0x00010101017e0100, 0x00020202027c0200, 0x00040404047a0400, 0x0008080808760800,
	0x00101010106e1000, 0x00202020205e2000, 0x00404040403e4000, 0x00808080807e8000,
	0x000101017e010100, 0x000202027c020200, 0x000404047a040400, 0x0008080876080800,
	0x001010106e101000, 0x002020205e202000, 0x004040403e404000, 0x008080807e808000,
	0x0001017e01010100, 0x0002027c02020200, 0x0004047a04040400, 0x0008087608080800,
	0x0010106e10101000, 0x0020205e20202000, 0x0040403e40404000, 0x0080807e80808000,
	0x00017e0101010100, 0x00027c0202020200, 0x00047a0404040400, 0x0008760808080800,
	0x00106e1010101000, 0x00205e2020202000, 0x00403e4040404000, 0x00807e8080808000,
	0x007e010101010100, 0x007c020202020200, 0x007a040404040400, 0x0076080808080800,
	0x006e101010101000, 0x005e202020202000, 0x003e404040404000, 0x007e808080808000,
	0x7e01010101010100, 0x7c02020202020200, 0x7a04040404040400, 0x7608080808080800,
	0x6e10101010101000, 0x5e20202020202000, 0x3e40404040404000, 0x7e80808080808000,
};
constexpr uint64_t Tables::BISHOP_MAGIC_MASKS[64] = {
	0x0040201008040200, 0x0000402010080400, 0x0000004020100a00, 0x0000000040221400,
	0x0000000002442800, 0x0000000204085000, 0x0000020408102000, 0x0002040810204000,
	0x0020100804020000, 0x0040201008040000, 0x00004020100a0000, 0x0000004022140000,
	0x0000000244280000, 0x0000020408500000, 0x0002040810200000, 0x0004081020400000,
	0x0010080402000200, 0x0020100804000400, 0x004020100a000a00, 0x0000402214001400,
	0x0000024428002800, 0x0002040850005000, 0x0004081020002000, 0x0008102040004000,
	0x0008040200020400, 0x0010080400040800, 0x0020100a000a1000, 0x0040221400142200,
	0x0002442800284400, 0x0004085000500800, 0x0008102000201000, 0x0010204000402000,
	0x0004020002040800, 0x0008040004081000, 0x00100a000a102000, 0x0022140014224000,
	0x0044280028440200, 0x0008500050080400, 0x0010200020100800, 0x0020400040201000,
	0x0002000204081000, 0x0004000408102000, 0x000a000a10204000, 0x0014001422400000,
	0x0028002844020000, 0x0050005008040200, 0x0020002010080400, 0x0040004020100800,
	0x0000020408102000, 0x0000040810204000, 0x00000a1020400000, 0x0000142240000000,
	0x0000284402000000, 0x0000500804020000, 0x0000201008040200, 0x0000402010080400,
	0x0002040810204000, 0x0004081020400000, 0x000a102040000000, 0x0014224000000000,
	0x0028440200000000, 0x0050080402000000, 0x0020100804020000, 0x0040201008040200,
};

// Magic Numbers
constexpr uint64_t Tables::ROOK_MAGICS[64] = {
	0x0802228030080000, 0x0600452000000000, 0x044001009801c000, 0x0040080210040000,
	0x0800040005040000, 0x2000080881300000, 0x080000988c8a0800, 0x8000040048004000,
	0x0480000010000002, 0x0418003202290000, 0x040a0041c0004000, 0x1040ca0080820000,
	0x007000b102000000, 0x4040420100011000, 0x0412000240002000, 0x00000a0028200000,
	0x0000140008280000, 0x8001002048000000, 0x3012000008000000, 0x400200500028c000,
	0x8800403c00070000, 0x20001b00140a3000, 0x0480880821520400, 0x5000500040a40000,
	0x02880100c1000000, 0x0001008008020000, 0x1800000080040000, 0x3210202204414000,
	0x0100000000208000, 0x4040000000020000, 0x830c400009402400, 0x0000002040000000,
	0x200080401a200000, 0x8002104001020000, 0x0001214010000000, 0x0080000800800000,
	0x0200000000002000, 0xb218228004001000, 0x8000080000800000, 0x004b380810600000,
	0x1001000000000000, 0x0210000020200000, 0x220000184000c000, 0x008208014440a000,
	0x4020000200100000, 0x0000000802220000, 0x08040020a0000000, 0x0088100012840000,
	0x2000000800018000, 0x2001201250465c00, 0x4900000300000000, 0x0820004e000a6000,
	0xa00000380c200000, 0x0006804140080000, 0x0002101000180000, 0x0101841002400000,
	0x8208005000000200, 0x0001400210002000, 0x00000b0410000000, 0x0090000280840000,
	0x4018108200200000, 0x8820202008409060, 0x4200104000801000, 0x4001210800888000,
};
constexpr uint64_t Tables::BISHOP_MAGICS[64] = {
	0xe482400410000000, 0x0000000000040001, 0x0802004000000000, 0x1808060000000000,
	0x0200000000018030, 0x0034100800000000, 0x5000000000000040, 0x0008080009000000,
	0x00104892a0800000, 0x0849080a49280000, 0x0810100007200000, 0x0080000000000000,
	0x0000800000000012, 0x4000882003000000, 0x2444000290000000, 0x8800a00000000000,
	0x0024006022020000, 0x06c00a8030042000, 0x11c0400c09400000, 0x4008104800000000,
	0x1008014008000000, 0x0400402410008000, 0x0610001200008000, 0xa010900001000000,
	0x0000002100000000, 0x0000000200000000, 0x000d401004000800, 0x1008002c3a010000,
	0x000000a404000000, 0x0040244860000000, 0x0000a42080800000, 0x0104400001024000,
	0x2800808808000000, 0x1400000080000000, 0x00041000000a4000, 0x0001040002000000,
	0x0229800000484000, 0x4048010500000000, 0x80088412001c0000, 0x142800a000f80000,
	0x01120044c0080000, 0x4011310012c00000, 0x628002a112000000, 0x00c5804100200000,
	0x0000000000000000, 0x4280841200080000, 0xc020000064200000, 0x8000000440022000,
	0x0000890208000000, 0x3082000000000000, 0x0028090038000000, 0x00000c4300300000,
	0x0c0c020000000000, 0x0840800000200000, 0x8200200420000000, 0x0060400008800000,
	0x0254880060240000, 0x4002120000000000, 0x0000000800200000, 0x0c10081100000000,
	0x00804a0102000000, 0x0281084280000800, 0x0040090000024000, 0x00400000a2042400,
};

// Magic Bitshifts 
constexpr uint8_t Tables::ROOK_INDEX_BITS[64] = {
	0x00000031, 0x00000032, 0x00000033, 0x00000034,
	0x00000035, 0x00000036, 0x00000037, 0x00000038,
	0x00000031, 0x00000032, 0x00000033, 0x00000034,
	0x00000035, 0x00000036, 0x00000037, 0x00000038,
	0x00000031, 0x00000032, 0x00000033, 0x00000034,
	0x00000035, 0x00000036, 0x00000037, 0x00000038,
	0x00000031, 0x00000032, 0x00000033, 0x00000034,
	0x00000035, 0x00000036, 0x00000037, 0x00000038,
	0x00000031, 0x00000032, 0x00000033, 0x00000034,
	0x00000035, 0x00000036, 0x00000037, 0x00000038,
	0x00000031, 0x00000032, 0x00000033, 0x00000034,
	0x00000035, 0x00000036, 0x00000037, 0x00000038,
	0x00000037, 0x00000037, 0x00000037, 0x00000037,
	0x00000037, 0x00000037, 0x00000036, 0x00000037,
	0x0000003f, 0x0000003f, 0x0000003f, 0x0000003f,
	0x0000003f, 0x0000003f, 0x0000003e, 0x0000003f,
};
constexpr uint8_t Tables::BISHOP_INDEX_BITS[64] = {
	0x00000037, 0x0000002f, 0x00000027, 0x0000001f,
	0x0000001a, 0x00000022, 0x0000002a, 0x00000032,
	0x00000036, 0x00000037, 0x0000002f, 0x00000027,
	0x00000022, 0x0000002a, 0x00000032, 0x00000033,
	0x00000035, 0x00000036, 0x00000037, 0x0000002f,
	0x0000002a, 0x00000032, 0x00000033, 0x00000034,
	0x00000034, 0x00000035, 0x00000036, 0x00000037,
	0x00000032, 0x00000033, 0x00000034, 0x00000035,
	0x00000033, 0x00000034, 0x00000035, 0x00000036,
	0x00000037, 0x00000034, 0x00000035, 0x00000036,
	0x00000032, 0x00000033, 0x00000034, 0x00000035,
	0x00000036, 0x00000037, 0x00000036, 0x00000037,
	0x0000002a, 0x0000002b, 0x0000002c, 0x0000002d,
	0x0000002e, 0x0000002f, 0x0000002e, 0x0000002f,
	0x00000032, 0x00000033, 0x00000034, 0x00000035,
	0x00000036, 0x00000037, 0x00000036, 0x00000037,
};

Tables::Tables()
{
	RookMoves = new std::unordered_map<uint64_t, uint64_t>;
	BishopMoves = new std::unordered_map<uint64_t, uint64_t>;

	InitRookMoves();
	InitBishopMoves();
}


void Tables::InitRookMoves() const
{
	for (uint8_t i = 0; i < 64; i++)
	{
		const Magic magic(i, true);
		MakeTable(magic);
	}

}

void Tables::InitBishopMoves() const
{
	for (uint8_t i = 0; i < 64; i++)
	{
		const Magic magic(i, false);
		MakeTable(magic);
	}
}

// Magics
uint64_t Tables::MagicIndex(const Magic& magic, const uint64_t blockers)
{
	return ((blockers & magic.Mask) * magic.MagicNumber) >> magic.IndexBits;
}

uint64_t Tables::GetRookSlidingMoves(const int square, const uint64_t blockers)
{
	uint64_t moves = 0;
	const int rank = square / 8;
	const int file = square % 8;
	// North
	for (int i = rank + 1; i < 8; i++)
	{
		moves |= (1ULL << (i * 8 + file));
		if (blockers & (1ULL << (i * 8 + file))) break;
	}
	// South
	for (int i = rank - 1; i >= 0; i--)
	{
		moves |= (1ULL << (i * 8 + file));
		if (blockers & (1ULL << (i * 8 + file))) break;
	}
	// East
	for (int i = file + 1; i < 8; i++)
	{
		moves |= (1ULL << (rank * 8 + i));
		if (blockers & (1ULL << (rank * 8 + i))) break;
	}
	// West
	for (int i = file - 1; i >= 0; i--)
	{
		moves |= (1ULL << (rank * 8 + i));
		if (blockers & (1ULL << (rank * 8 + i))) break;
	}
	return moves;
}

uint64_t Tables::GetBishopSlidingMoves(const int square, const uint64_t blockers)
{
	uint64_t moves = 0;
	const int rank = square / 8;
	const int file = square % 8;
	// North East
	for (int i = 1; i < 8; i++)
	{
		if (rank + i > 7 || file + i > 7) break;
		moves |= (1ULL << ((rank + i) * 8 + file + i));
		if (blockers & (1ULL << ((rank + i) * 8 + file + i))) break;
	}
	// North West
	for (int i = 1; i < 8; i++)
	{
		if (rank + i > 7 || file - i < 0) break;
		moves |= (1ULL << ((rank + i) * 8 + file - i));
		if (blockers & (1ULL << ((rank + i) * 8 + file - i))) break;
	}
	// South East
	for (int i = 1; i < 8; i++)
	{
		if (rank - i < 0 || file + i > 7) break;
		moves |= (1ULL << ((rank - i) * 8 + file + i));
		if (blockers & (1ULL << ((rank - i) * 8 + file + i))) break;
	}
	// South West
	for (int i = 1; i < 8; i++)
	{
		if (rank - i < 0 || file - i < 0) break;
		moves |= (1ULL << ((rank - i) * 8 + file - i));
		if (blockers & (1ULL << ((rank - i) * 8 + file - i))) break;
	}
	return moves;
}

uint16_t Tables::GetAllBlockers(uint64_t* allBlockers, const uint64_t andMask)
{
	uint64_t currentBlockers = 0;
	uint16_t i = 0;
	do
	{
		currentBlockers |= ~andMask;
		currentBlockers++;
		currentBlockers &= andMask;

		if (currentBlockers == 0) break;

		allBlockers[i] = currentBlockers;
		i++;
	}
	while (true);
	return i;
}

void Tables::MakeTable(const Magic& magic) const
{
	auto* allBlockers = new uint64_t[4096];
	const uint16_t numBlockers = GetAllBlockers(allBlockers, magic.Mask);

	for (uint16_t n = 0; n < numBlockers; n++)
	{
		const uint64_t blockers = allBlockers[n];
		const uint64_t index = MagicIndex(magic, blockers);

		uint64_t slidingMoves;
		if (magic.Rook)
		{
			slidingMoves = GetRookSlidingMoves(magic.Square, blockers);
		}
		else
		{
			slidingMoves = GetBishopSlidingMoves(magic.Square, blockers);
		}

		if (RookMoves->count(index) != 1)
		{
			RookMoves->insert(std::make_pair(index, slidingMoves));
		}
	}

	delete[] allBlockers;
}

uint64_t Tables::GetRookMoves(const uint8_t square, const uint64_t allPieces) const
{
	const Magic magic(square, true);
	const uint64_t blockers = allPieces & magic.Mask;
	return RookMoves->at(MagicIndex(magic, blockers));
}

uint64_t Tables::GetBishopMoves(const uint8_t square, const uint64_t allPieces) const
{
	const Magic magic(square, false);
	const uint64_t blockers = allPieces & magic.Mask;
	return BishopMoves->at(MagicIndex(magic, blockers));
}

Tables::Magic::Magic(const uint8_t square, const bool rook) {
	this->Square = square;
	this->Rook = rook;
	this->Mask = rook ? Tables::ROOK_MAGIC_MASKS[square] : Tables::BISHOP_MAGIC_MASKS[square];
	this->MagicNumber = rook ? Tables::ROOK_MAGICS[square] : Tables::BISHOP_MAGICS[square];
	this->IndexBits = rook ? Tables::ROOK_INDEX_BITS[square] : Tables::BISHOP_INDEX_BITS[square];
}

